diff -r 2447a1b462c2 sys/src/cmd/rio/rio.c
--- a/sys/src/cmd/rio/rio.c	Thu Apr 12 17:50:10 2018 -0400
+++ b/sys/src/cmd/rio/rio.c	Fri Apr 20 15:51:25 2018 -0700
@@ -24,6 +24,7 @@
 void		move(void);
 void		delete(void);
 void		hide(void);
+void		tile(void);
 void		unhide(int);
 void		newtile(int);
 Image*	sweep(void);
@@ -35,6 +36,7 @@
 Channel	*kbdchan;	/* chan(char*); */
 Rectangle	viewr;
 int		threadrforkflag = 0;	/* should be RFENVG but that hides rio from plumber */
+int	ctrldown;
 
 void	mousethread(void*);
 void	keyboardthread(void*);
@@ -52,6 +54,7 @@
 	Move,
 	Delete,
 	Hide,
+	Tile,
 	Exit,
 };
 
@@ -90,6 +93,7 @@
  [Move]		"Move",
  [Delete]		"Delete",
  [Hide]		"Hide",
+ [Tile]		"Tile",
  [Exit]		"Exit",
 			nil
 };
@@ -339,6 +343,50 @@
 			write(window[i]->notefd, "hangup", 6); 
 }
 
+void movewindowforward(void) { 
+  Window *w;
+  int i;
+  for(i = 0; i <= nwindow; i++) {
+    if(window[i] == input) {
+      if (i >= nwindow - 1) {
+        w = window[0];
+        incref(w);
+        wtopme(w);
+        wcurrent(w);
+        wclose(w);
+      } else {
+        w = window[i+1];
+        incref(w);
+        wtopme(w);
+        wcurrent(w);
+        wclose(w);
+      }
+    }
+  }
+}
+
+void movewindowbackwards(void) {
+  Window *w;
+  int i;
+  for(i = 0; i <= nwindow; i++) {
+    if(window[i] == input) {
+      if (i == 0 ) {
+        w = window[nwindow - 1];
+        incref(w);
+        wtopme(w);
+        wcurrent(w);
+        wclose(w);
+      } else {
+        w = window[i-1];
+        incref(w);
+        wtopme(w);
+        wcurrent(w);
+        wclose(w);
+      }
+    }
+  }
+}
+
 void
 keyboardthread(void*)
 {
@@ -763,6 +811,9 @@
 	case Hide:
 		hide();
 		break;
+	case Tile:
+		tile();
+		break;
 	case Exit:
 		if(Hidden > Exit){
 			send(exitchan, nil);
@@ -1159,6 +1210,149 @@
 		}
 }
 
+void
+tile(void)
+{
+	Window *w;
+	Image *im;
+	Point o, n;
+//  Point canvas;
+	uint i, k, j; 
+	uint ytiles = 0;
+	uint xtiles = 1;
+
+	// int s = 0;
+
+	if (nwindow < 1) { 
+		return; 
+	} 
+
+	for(k = 1; xtiles * ytiles < nwindow; k++) {
+		switch(k % 2) {
+			case 0:
+				xtiles++;
+				break;
+			default:
+				ytiles++;
+				break;
+		}
+	}
+
+	o = subpt(viewr.max, viewr.min);
+	n = subpt(view->clipr.max, view->clipr.min);
+
+/*
+	unsigned int sw, sh, x, y;
+	//canvas = subpt(view -> clipr.max, view -> clipr.min);
+  canvas = subpt(viewr.max, viewr.min);
+
+	x = canvas.x; 
+	y = viewr.min.y;
+//	x = view -> clipr.max.x;
+//	y = view -> clipr.min.y;
+
+	sw = canvas.x; 
+	sh = canvas.y; 
+
+  for(i = 0; i < nwindow; i++) {
+		// print("X: %d, Y: %d, SW : %d, SH: %d, I : %d, NWindow: %d \n", x, y, sw, sh, i, nwindow);
+		w = window[i];
+//    qsort(w, nwindow, sizeof(window[0]), wtopcmp);
+
+	  Rectangle r;
+
+    if(i < nwindow - 1) {
+      if(i % 2) {
+        sh /= 2;
+      } else {
+        sw /= 2;
+      } if((i % 4) == 2 && !s) {
+        x += sw;
+      } else if((i % 4) == 3 && !s) {
+        y += sh; 
+      }
+    }
+    if((i % 4) == 0) {
+      if(s) { y += sh; } 
+      else  { y -= sh; }
+    } else if((i % 4) == 1) { 
+      x += sw;
+    } else if((i % 4) == 2) {
+      y += sh;
+    } else if((i % 4) == 3) {
+      if(s) { x += sw; }
+      else { x -= sw; }
+    }
+
+    if(i == 0) {
+      if (nwindow != 1) { sw = canvas.x; } 
+      y = canvas.y; 
+    } else if(i == 1) {
+      sw = canvas.x - sw;
+    }
+		r.min.x = x;
+		r.min.y = y;
+
+		r.max.x = sw;
+		r.max.y = sh;
+
+		for(j = 0; j < nhidden; ++j) {
+			if(w == hidden[j])
+				break;
+		}
+
+		incref(w);
+		if(j > nhidden) {
+			im = allocimage(display, r, screen->chan, 0, DNofill);
+			r = ZR;
+		} else { 
+			im = allocwindow(wscreen, r, Refbackup, DNofill);
+		} 
+
+		if(im) {
+			wsendctlmesg(w, Reshaped, r, im);
+		}
+		wclose(w);
+	}
+	flushimage(display, 1);
+} */
+	for(i = 0; i < nwindow; ++i) {
+		w = window[i];
+		Rectangle r;
+		int sw, sh, x, y;
+
+		sw = o.x / xtiles;
+		sh = o.y / ytiles;
+		x = sw * (i % xtiles);
+		y = sh * ((i / xtiles) % ytiles);
+
+		r.min.x = x;
+		r.min.y = y;
+
+		r.max.x = x + sw; 
+		r.max.y = y + sh; 
+
+		r = rectaddpt(r, screen->clipr.min);
+
+		for(j = 0; j < nhidden; ++j)
+			if(w == hidden[j])
+				break;
+
+		incref(w);
+		if(j < nhidden) {
+			im = allocimage(display, r, screen->chan, 0, DNofill);
+		} else {
+			 im = allocwindow(wscreen, r, Refbackup, DNofill);
+		}
+
+		if(im)
+			wsendctlmesg(w, Reshaped, r, im);
+		wclose(w);
+	}
+
+	flushimage(display, 1);
+}
+
 Window*
 new(Image *i, int hideit, int scrollit, int pid, char *dir, char *cmd, char **argv)
 {
